#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   raffle - Easily select a winner!
#   Author: Chris Ward <kejbaly2@gmail.com>
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#   Copyright (c) 2015 Chris Ward. All rights reserved.
#
#   This copyrighted material is made available to anyone wishing
#   to use, modify, copy, or redistribute it subject to the terms
#   and conditions of the GNU General Public License version 2.
#
#   This program is distributed in the hope that it will be
#   useful, but WITHOUT ANY WARRANTY; without even the implied
#   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#   PURPOSE. See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public
#   License along with this program; if not, write to the Free
#   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301, USA.
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

"""
Quickly select a random set of winners from a pool of candidates.
"""

from __future__ import unicode_literals, absolute_import

import argparse
import csv
import os
import random
import re

from rafflepy.raffle import *


def parse_cli():
    parser = argparse.ArgumentParser(description='Process input')
    subparsers = parser.add_subparsers(help='Datasources', dest='src')

    gspread = subparsers.add_parser('gspread')
    gspread.add_argument('uri',
                         help='source to build candidate pool from')
    gspread.add_argument('-s', '--worksheet', nargs='?',
                         help='Worksheet name')

    csv_file = subparsers.add_parser('csv')
    csv_file.add_argument('uri',
                          help='source to build candidate pool from')

    parser.add_argument('-c', '--column', default='Username',
                        help='which column to extract data from')
    parser.add_argument('-w', '--count', type=int, default=1,
                        help='number of winners to draw')
    parser.add_argument('-x', '--exclude', nargs='+',
                        help='names to exclude from the raffle drawing')
    parser.add_argument('-C', '--casino', action='store_true',
                        help='casino cli style')

    return vars(parser.parse_args())


def main():
    args = parse_cli()
    src = args['src']  # what data source are we targetting?
    is_casino = args['casino']

    if is_casino:
        import itertools
        import sys
        import time
        import thread

    if src == 'gspread':
        wks = args.get('worksheet')
        column = args.get('column')
        pool = input_gload(args.get('uri'), column=column, wks_name=wks)
    elif src == 'csv':
        pool = input_load(args.get('uri'), column=args.get('column'))

    exlude_list = args.get('exclude')
    if exlude_list:
        pool = input_filter(pool, exlude_list)

    # filter empty
    pool = [x for x in pool if x.strip()]

    k = args.get('count') or 1
    # if count of winners larger than count of participants then reduce k
    if k > len(pool):
        k = len(pool)

    if k > 1:
        print('Selecting winners from {} candidates...\n'.format(len(pool)))
        if is_casino:
            winner = []
            for _ in range(k):
                user = select_winner(pool)
                pool.remove(user)
                winner.append(user)
            winner = ', '.join(winner)
        else:
            winner = ', '.join(random.sample(pool, k))
        announce = '\n ... and the winners are... {}! Congrats!'.format(winner)
    else:
        print('Selecting winner from {} candidates...'.format(len(pool)))
        if is_casino:
            winner = select_winner(pool)
        else:
            winner = ', '.join(random.sample(pool, k))
        announce = '\n ... and the winner is... {}! Congrats!'.format(winner)

    print(announce)


def input_thread(l):
    """ Stop sampling on enter press """
    raw_input()
    l.append(None)


def select_winner(pool):
    spinner = itertools.cycle(pool)
    l = []
    max_len = max([len(w) for w in pool])
    pad = " " * max_len
    thread.start_new_thread(input_thread, (l,))
    while not l:
        candidate = spinner.next()
        sys.stdout.write('%s\r' % pad)
        sys.stdout.write("%s\r" % candidate)  # write the next character
        sys.stdout.flush()                # flush stdout buffer (actual character display)
        time.sleep(0.1)
    return candidate


if __name__ == "__main__":
    main()
